h1. Настройка ресурсных маршрутов

Хотя маршруты и хелперы по умолчанию, созданные +resources :posts+, обычно нормально работают, вы, возможно, захотите их настроить некоторым образом. Rails позволяет настроить практически любую часть ресурсных хелперов.

h4. Определение используемого контроллера

Опция +:controller+ позволяет явно определить контроллер, используемый ресурсом. Например:

<ruby>
resources :photos, :controller => "images"
</ruby>

распознает входящие пути, начинающиеся с +/photo+, но смаршрутизирует к контроллеру +Images+:

|_.Метод HTTP|_.Путь           |_.Экшн   |_.Именнованный хелпер |
|GET         |/photos          |index    | photos_path          |
|GET         |/photos/new      |new      | new_photo_path       |
|POST        |/photos          |create   | photos_path          |
|GET         |/photos/:id      |show     | photo_path(:id)      |
|GET         |/photos/:id/edit |edit     | edit_photo_path(:id) |
|PUT         |/photos/:id      |update   | photo_path(:id)      |
|DELETE      |/photos/:id      |destroy  | photo_path(:id)      |

NOTE: Используйте +photos_path+, +new_photo_path+ и т.д. для создания путей для этого ресурса.

h4. Опеределение ограничений

Можно использовать опцию +:constraints+ для определения требуемого формата на неявном +id+. Например:

<ruby>
resources :photos, :constraints => {:id => /[A-Z][A-Z][0-9]+/}
</ruby>

Это объявление ограничивает параметр +:id+ соответствием предоставленному регулярному выражению. Итак, в этом случае роутер больше не будет сопоставлять +/photos/1+ этому маршруту. Вместо этого будет соответствовать +/photos/RR27+.

Можно определить одиночное ограничение, применив его к ряду маршрутов, используя блочную форму:

<ruby>
constraints(:id => /[A-Z][A-Z][0-9]+/) do
  resources :photos
  resources :accounts
end
</ruby>

NOTE: Конечно, можете использовать более продвинутые ограничения, доступные в нересурсных маршрутах, в этом контексте

TIP: По умолчанию параметр +:id+ не принимает точки - так как точка используется как разделитель для формата маршрута. Если необходимо использовать точку в +:id+, добавьте ограничение, которое переопределит это - к примеру +:id+ => /[^\/]+/ позволяет все, кроме слэша.

h4. Переопределение именнованных хелперов

Опция +:as+ позволяет переопределить нормальное именование для именнованных маршрутных хелперов. Например:

<ruby>
resources :photos, :as => "images"
</ruby>

распознает входящие пути, начинающиеся с +/photos+ и смаршрутизирует запросы к +PhotosController+:

|_.Метод HTTP|_.Путь            |_.Экшн   |_.Именнованный хелпер |
|GET         |/photos           |index    | images_path          |
|GET         |/photos/new       |new      | new_image_path       |
|POST        |/photos           |create   | images_path          |
|GET         |/photos/:id       |show     | image_path(:id)      |
|GET         |/photos/:id/edit  |edit     | edit_image_path(:id) |
|PUT         |/photos/:id       |update   | image_path(:id)      |
|DELETE      |/photos/:id       |destroy  | image_path(:id)      |

h4. Переопределение сегментов +new+ и +edit+

Опция +:path_names+ позволяет переопределить автоматически создаваемые сегменты "new" и "edit" в путях:

<ruby>
resources :photos, :path_names => { :new => 'make', :edit => 'change' }
</ruby>

Это приведет к тому, что роутинг распознает пути, такие как

<plain>
/photos/make
/photos/1/change
</plain>

NOTE: Фактические имена экшнов не меняются этой опцией. Два показанных пути все еще ведут к экшнам +new+ и +edit+.

TIP: Если вдруг захотите изменить эту опцию одинаково для всех маршрутов, можно использовать scope:

<ruby>
scope :path_names => { :new => "make" } do
  # остальные ваши маршруты
end
</ruby>

h4. Префикс именнованных маршрутных хелперов

Можно использовать опцию +:as+ для задания префикса именнованных маршрутных хелперов, создаваемых Rails для маршрута. Используйте эту опцию для предотвращения коллизий имен между маршрутами, используемыми пространство путей.

<ruby>
scope "admin" do
  resources :photos, :as => "admin_photos"
end

resources :photos
</ruby>

Это предоставит маршрутные хелперы такие как +admin_photos_path+, +new_admin_photo_path+ и т.д.

Для задания префикса группы маршрутов, используйте +:as+ со +scope+:

<ruby>
scope "admin", :as => "admin" do
  resources :photos, :accounts
end

resources :photos, :accounts
</ruby>

Это создаст маршруты такие как +admin_photos_path+ и +admin_accounts_path+, ведущие соответственно к +/admin/photos+ и +/admin/accounts+.

NOTE: Пространство +namespace+ автоматически добавляет +:as+, так же, как и префиксы +:module+ и +:path+.

Можно задать префикс маршрута именнованным параметром также так:

<ruby>
scope ":username" do
  resources :posts
end
</ruby>

Это предоставит URL, такие как +/bob/posts/1+ и позволит обратиться к части пути +username+ в контроллерах, хелперах и вьюхах как +params[:username]+.

h4. Ограничение создаваемых маршрутов

По умолчанию Rails создает маршруты для всех семи экшнов по умолчанию (index, show, new, create, edit, update, and destroy) для каждого маршрута RESTful вашего приложения. Можно использовать опции +:only+ и +:except+ для точной настройки этого поведения. Опция +:only+ говорит Rails создать только определенные маршруты:

<ruby>
resources :photos, :only => [:index, :show]
</ruby>

Теперь запрос +GET+ к +/photos+ будет успешным, а запрос +POST+ к +/photos+ (который обычно соединяется с экшном +create+) провалится.

Опция +:except+ определяет маршрут или перечень маршрутов, который Rails _не_ должен создавать:

<ruby>
resources :photos, :except => :destroy
</ruby>

В этом случае Rails создаст все нормальные маршруты за исключением маршрута для +destroy+ (запрос +DELETE+ к +/photos/:id+).

TIP: Если в вашем приложении много маршрутов RESTful, использование +:only+ и +:except+ для создания только тех маршрутов, которые Вам фактически нужны, позволит снизить использование памяти и ускорить процесс роутинга.

h4. Переведенные пути

Используя +scope+, можно изменить имена путей, создаваемых ресурсами:

<ruby>
scope(:path_names => { :new => "neu", :edit => "bearbeiten" }) do
  resources :categories, :path => "kategorien"
end
</ruby>

Rails теперь создаст маршруты к +CategoriesController+.

|_.Метод HTTP|_.Путь                     |_.Экшн   |_.Именнованный хелпер    |
|GET         |/kategorien                |index    | categories_path         |
|GET         |/kategorien/neu            |new      | new_category_path       |
|POST        |/kategorien                |create   | categories_path         |
|GET         |/kategorien/:id            |show     | category_path(:id)      |
|GET         |/kategorien/:id/bearbeiten |edit     | edit_category_path(:id) |
|PUT         |/kategorien/:id            |update   | category_path(:id)      |
|DELETE      |/kategorien/:id            |destroy  | category_path(:id)      |

h4. Переопределение единственного числа

Если хотите определить единственное число ресурса, следует добавить дополнительные правила в +Inflector+.

<ruby>
ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular 'tooth', 'teeth'
end
</ruby>

h4. Использование +:as+ во вложенных ресурсах

Опция +:as+ переопределяет автоматически создаваемое имя для ресурса в хелперах вложенного маршрута. Например,

<ruby>
resources :magazines do
  resources :ads, :as => 'periodical_ads'
end
</ruby>

Это создаст маршрутные хелперы такие как +magazine_periodical_ads_url+ и +edit_magazine_periodical_ad_path+.
