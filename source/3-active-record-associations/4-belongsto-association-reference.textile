h1. Подробная информация по связи belongs_to

Связь +belongs_to+ создает соответствие один-к-одному с другой моделью. В терминах базы данных эта связь сообщает, что этот класс содержит внешний ключ. Если внешний ключ содержит другой класс, вместо этого следует использовать +has_one+.

h4. Методы, добавляемые +belongs_to+

Когда объявляете связь +belongs_to+, объявляющий класс автоматически получает четыре метода, относящихся к связи:

* <tt><em>association</em>(force_reload = false)</tt>
* <tt><em>association</em>=(associate)</tt>
* <tt>build_<em>association</em>(attributes = {})</tt>
* <tt>create_<em>association</em>(attributes = {})</tt>

Во всех четырех методах <tt><em>association</em></tt> заменяется символом, переданным как первый аргумент в +belongs_to+. Например, имеем объявление:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer
end
</ruby>

Каждый экземпляр модели order будет иметь эти методы:

<ruby>
customer
customer=
build_customer
create_customer
</ruby>

NOTE: Когда устанавливаете новую связь +has_one+ или +belongs_to+, следует использовать префикс +build_+ для построения связи, в отличие от метода +association.build+, используемый для связей +has_many+ или +has_and_belongs_to_many+. Чтобы создать связь, используйте префикс +create_+.

h5(#belongs_to-association). <tt><em>association</em>(force_reload = false)</tt>

Метод <tt><em>association</em></tt> возвращает связанный объект, если он есть. Если объекта нет, возвращает +nil+.

<ruby>
@customer = @order.customer
</ruby>

Если связанный объект уже был получен из базы данных для этого объекта, возвращается кэшированная версия. Чтобы переопределить это поведение (и заставить прочитать из базы данных), передайте +true+ как аргумент +force_reload+.

h5(#belongs_to-association_equal). <tt>_association_=(associate)</tt>

Метод <tt><em>association</em>=</tt> привязывает связанный объект к этому объекту. Фактически это означает извлечение первичного ключа из связанного объекта и присвоение его значения внешнему ключу.

<ruby>
@order.customer = @customer
</ruby>

h5(#belongs_to-build_association). <tt>build_<em>association</em>(attributes = {})</tt>

Метод <tt>build_<em>association</em></tt> возвращает новый объект связанного типа. Этот объект будет экземпляром с переданными атрибутами, будет установлена связь с внешним ключом этого объекта, но связанный объект пока _не_ будет сохранен.

<ruby>
@customer = @order.build_customer(:customer_number => 123,
  :customer_name => "John Doe")
</ruby>

h5(#belongs_to-create_association). <tt>create_<em>association</em>(attributes = {})</tt>

Метод <tt>create_<em>association</em></tt> возвращает новый объект связанного типа. Этот объект будет экземпляром с переданными атрибутами, будет установлена связь с внешним ключом этого объекта, и, если он пройдет валидации, определенные в связанной модели, связанный объект _будет_ сохранен.

<ruby>
@customer = @order.create_customer(:customer_number => 123,
  :customer_name => "John Doe")
</ruby>

h4. Опции для +belongs_to+

Хотя Rails использует разумные значения по умолчанию, работающие во многих ситуациях, бывают случаи, когда хочется изменить поведение связи +belongs_to+. Такая настройка легко выполнима с помощью передачи опции при создании связи. Например, эта связь использует две такие опции:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :counter_cache => true,
    :conditions => "active = 1"
end
</ruby>

Связь +belongs_to+ поддерживает эти опции:

* +:autosave+
* +:class_name+
* +:conditions+
* +:counter_cache+
* +:dependent+
* +:foreign_key+
* +:include+
* +:polymorphic+
* +:readonly+
* +:select+
* +:touch+
* +:validate+

h5(#belongs_to-autosave). +:autosave+

Если установить опцию +:autosave+ в +true+, Rails сохранит любые загруженные члены и уничтожит члены, помеченные для уничтожения, всякий раз, когда вы сохраните родительский объект.

h5(#belongs_to-class_name). +:class_name+

Если имя другой модели не может быть произведено из имени связи, можете использовать опцию +:class_name+ для предоставления имени модели. Например, если заказ принадлежит покупателю, но фактическое имя модели, содержащей покупателей +Patron+, можете установить это следующим образом:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :class_name => "Patron"
end
</ruby>

h5(#belongs_to-conditions). +:conditions+

Опция +:conditions+ позволяет определить условия, которым должен удовлетворять связанный объект (в синтаксисе SQL, используемом в условии +WHERE+).

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :conditions => "active = 1"
end
</ruby>

h5(#belongs_to-counter_cache). +:counter_cache+

Опция +:counter_cache+ может быть использована, чтобы сделать поиск количества принадлежацих объектов более эффективным. Рассмотрим эти модели:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer
end
class Customer < ActiveRecord::Base
  has_many :orders
end
</ruby>

С этими объявлениями запрос значения +@customer.orders.size+ требует обращения к базе данных для выполнения запроса +COUNT(*)+. Чтобы этого избежать, можете добавить кэш счетчика в _принадлежащую_ модель:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :counter_cache => true
end
class Customer < ActiveRecord::Base
  has_many :orders
end
</ruby>

С этим объявлением, Rails будет хранить в кэше актуальное значение и затем возвращать это значение в ответ на метод +size+.

Хотя опция +:counter_cache+ определяется в модели, включающей определение +belongs_to+, фактический столбец должен быть добавлен в _связанную_ модель. В вышеописанном случае, необходимо добавить столбец, названный +orders_count+ в модель +Customer+. Имя столбца по умолчанию можно переопределить, если вы этого желаете:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :counter_cache => :count_of_orders
end
class Customer < ActiveRecord::Base
  has_many :orders
end
</ruby>

Столбцы кэша счетчика добавляются в список атрибутов модели только для чтения посредством +attr_readonly+.

h5(#belongs_to-dependent). +:dependent+

Если установить опцию +:dependent+ как +:destroy+, тогда удаление этого объекта вызовет метод +destroy+ у связанного объекта, для удаление того объекта. Если установить опцию +:dependent+ как +:delete+, тогда удаление этого объекта удалит связанный объект _без_ вызова его метода +destroy+.

WARNING: Не следует определять эту опцию в связи +belongs_to+, которая соединена со связью +has_many+ в другом классе. Это приведет к "битым" связям в записях вашей базы данных.

h5(#belongs_to-foreign_key). +:foreign_key+

По соглашению Rails предполагает, что столбец, используемый для хранения внешнего ключа в этой модели, имеет имя модели с добавленным суффиксом +_id+>. Опция +:foreign_key+ позволяет установить имя внешнего ключа прямо:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :class_name => "Patron",
    :foreign_key => "patron_id"
end
</ruby>

TIP: В любом случае, Rails не создаст столбцы внешнего ключа за вас. Вам необходимо явно определить их в своих миграциях.

h5(#belongs_to-includes). +:include+

Можете использовать опцию +:include+ для определения связей второго порядка, которые должны быть нетерпеливо загружены, когда эта связь используется. Например, рассмотрим эти модели:

<ruby>
class LineItem < ActiveRecord::Base
  belongs_to :order
end

class Order < ActiveRecord::Base
  belongs_to :customer
  has_many :line_items
end

class Customer < ActiveRecord::Base
  has_many :orders
end
</ruby>

Если вы часто получаете покупателей непосредственно из товарных позиций (+@line_item.order.customer+), тогда можете сделать свой код более эффективным, включив покупателей в связь между товарными позициями и заказами:

<ruby>
class LineItem < ActiveRecord::Base
  belongs_to :order, :include => :customer
end

class Order < ActiveRecord::Base
  belongs_to :customer
  has_many :line_items
end

class Customer < ActiveRecord::Base
  has_many :orders
end
</ruby>

NOTE: Нет необходимости использовать +:include+ для прямых связей - то есть, если есть +Order belongs_to :customer+, тогда customer нетерпеливо загрузится автоматически, когда это потребуется.

h5(#belongs_to-polymorphic). +:polymorphic+

Передача +true+ для опции +:polymorphic+ показывает, что это полиморфная связь. Полиморфные связи подробно рассматривались "ранее":/active-record-associations/the-types-of-associations-2#polymorphic-associations.

h5(#belongs_to-readonly). +:readonly+

Если установите опцию +:readonly+ в +true+, тогда связанный объект будет доступен только для чтения, когда получен посредством связи.

h5(#belongs_to-select). +:select+

Опция +:select+ позволяет переопределить SQL условие +SELECT+, которое используется для получения данных о связанном объекте. По умолчанию Rails получает все столбцы.

TIP: Если установите опцию +:select+ в связи +belongs_to+, вы должны также установить опцию +foreign_key+, чтобы гарантировать правильные результаты.

h5(#belongs_to-touch). +:touch+

Если установите опцию +:touch+ в +:true+, то временные метки +updated_at+ или +updated_on+ на связанном объекте будут установлены в текущее время всякий раз, когда этот объект будет сохранен или уничтожен:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :touch => true
end

class Customer < ActiveRecord::Base
  has_many :orders
end
</ruby>

В этом случае, сохранение или уничтожение заказа обновит временную метку на связанном покупателе. Также можно определить конкретный атрибут временной метки для обновления:

<ruby>
class Order < ActiveRecord::Base
  belongs_to :customer, :touch => :orders_updated_at
end
</ruby>

h5(#belongs_to-validate). +:validate+

Если установите опцию +:validate+ в +true+, тогда связанные объекты будут проходить валидацию всякий раз, когда вы сохраняете этот объект. По умолчанию она равна +false+: связанные объекты не проходят валидацию, когда этот объект сохраняется.

h5(#belongs_to-do_any_associated_objects_exist). Существуют ли связанные объекты?

Можно увидеть, существует ли какой-либо связанный объект, при использовании метода <tt><em>association</em>.nil?</tt>:

<ruby>
if @order.customer.nil?
  @msg = "No customer found for this order"
end
</ruby>

h4(#belongs_to-when_are_objects_saved). Когда сохраняются объекты?

Присвоение связи  +belongs_to+ не приводит к автоматическому сохранению ни самого объекта, ни связанного объекта.
