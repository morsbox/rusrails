h1. Получение объектов из базы данных

Для получения объектов из базы данных Active Record предоставляет несколько методов поиска. В каждый метод поиска можно передавать аргументы для выполнения определенных запросов в базу данных без необходимости писать на чистом SQL.

Методы следующие:
* +where+
* +select+
* +group+
* +order+
* +reorder+
* +reverse_order+
* +limit+
* +offset+
* +joins+
* +includes+
* +lock+
* +readonly+
* +from+
* +having+

Все эти методы возвращают экземпляр +ActiveRecord::Relation+.

Вкратце основные операции +Model.find(options)+ таковы:

* Преобразовать предоставленные опции в эквивалентный запрос SQL.
* Выполнить запрос SQL и получить соответствующие результаты из базы данных.
* Создать экземпляр эквивалентного объекта Ruby подходящей модели для каждой строки результата запроса.
* Запустить колбэки +after_find+, если таковые имеются.

h4. Получение одиночного объекта

Active Record представляет пять различных способов получения одиночного объекта.

h5. Использование первичного ключа

Используя +Model.find(primary_key, options = nil)+, можно получить объект, соответствующий определенному первичному ключу (_primary key_) и предоставленным опциям. Например:

<ruby>
# Ищет клиента с первичным ключом (id) 10.
client = Client.find(10)
# => #<Client id: 10, first_name: "Ryan">
</ruby>

SQL эквивалент этого такой:

<sql>
SELECT * FROM clients WHERE (clients.id = 10)
</sql>

<tt>Model.find(primary_key)</tt> вызывает исключение +ActiveRecord::RecordNotFound+, если соответствующей записи не было найдено.

h5. +first+

<tt>Model.first</tt> находит первую запись, соответствующую предоставленным опциям, если таковые имеются. Например:

<ruby>
client = Client.first
# => #<Client id: 1, first_name: "Lifo">
</ruby>

SQL эквивалент этого такой:

<sql>
SELECT * FROM clients LIMIT 1
</sql>

<tt>Model.first</tt> возвращает +nil+, если не найдено соответствующей записи. Исключения не вызываются.

h5. +last+

<tt>Model.last</tt> находит последнюю запись, соответствующую предоставленным опциям. Например:

<ruby>
client = Client.last
# => #<Client id: 221, first_name: "Russel">
</ruby>

SQL эквивалент этого такой:

<sql>
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1
</sql>

<tt>Model.last</tt> возвращает +nil+, если не найдено соответствующей записи. Исключения не вызываются.

h5(#first_1). +first!+

<tt>Model.first!</tt> находит первую запись. Например:

<ruby>
client = Client.first!
# => #<Client id: 1, first_name: "Lifo">
</ruby>

SQL эквивалент этого такой:

<sql>
SELECT * FROM clients LIMIT 1
</sql>

<tt>Model.first</tt> вызывает +RecordNotFound+, если не найдено соответствующей записи.

h5(#last_1). +last!+

<tt>Model.last!</tt> находит последнюю запись. Например:

<ruby>
client = Client.last!
# => #<Client id: 221, first_name: "Russel">
</ruby>

SQL эквивалент этого такой:

<sql>
SELECT * FROM clients ORDER BY clients.id DESC LIMIT 1
</sql>

<tt>Model.last</tt> вызывает +RecordNotFound+, если не найдено соответствующей записи.

h4. Получение нескольких объектов

h5. Использование нескольких первичных ключей

<tt>Model.find(array_of_primary_key)</tt> принимает массив _первичных ключей_, возвращая массив, содержащий все соответствующие записи для предоставленных _первичных ключей_. Например:

<ruby>
# Найти клиентов с первичными ключами 1 и 10.
client = Client.find([1, 10]) # Или даже Client.find(1, 10)
# => [#<Client id: 1, first_name: "Lifo">, #<Client id: 10, first_name: "Ryan">]
</ruby>

SQL эквивалент этого такой:

<sql>
SELECT * FROM clients WHERE (clients.id IN (1,10))
</sql>

WARNING: <tt>Model.find(array_of_primary_key)</tt> вызывает исключение +ActiveRecord::RecordNotFound+, если не найдено соответствующих записей для <strong>всех</strong> предоставленных первичных ключей.

h4. Получение нескольких объектов пакетами

Часто необходимо перебрать огромный набор записей, когда рассылаем письма всем пользователям или импортируем некоторые данные.

Это может показаться простым:

<ruby>
# Очень неэффективно, когда в таблице users тысячи строк.
User.all.each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

Но этот подход становится очень непрактичным с увеличением размера таблицы, поскольку +User.all.each+ говорит Active Record извлечь _таблицу полностью_ за один проход, создать объект модели для каждой строки и держать этот массив в памяти. В реальности, если имеется огромное количество записей, полная коллекция может превысить количество доступной памяти.

Rails представляет два метода, посвященных разделению записей на дружелюбные к памяти пакеты для обработки. Первый метод, +find_each+, получает пакет записей и затем вкладывает _каждую_ запись в блок отдельно как модель. Второй метод, +find_in_batches+, получает пакет записей и затем вкладывает _весь пакет_ в блок как массив моделей.

TIP: Методы +find_each+ и +find_in_batches+ предназначены для пакетной обработки большого числа записей, которые не поместятся в памяти за раз. Если нужно просто перебрать тысячу записей, более предпочтителен вариант обычных методов поиска.

h5. +find_each+

Метод +find_each+ получает пакет записей и затем вкладывает _каждую_ запись в блок отдельно как модель. В следующем примере +find_each+ получит 1000 записей (текущее значение по умолчанию и для +find_each+, и для +find_in_batches+), а затем вложит каждую запись отдельно в блок как модель. Процесс повторится, пока не будут обработаны все записи:

<ruby>
User.find_each do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

h6. Опции для +find_each+

Метод +find_each+ принимает большинство опций, допустимых для обычного метода +find+, за исключением +:order+ и +:limit+, зарезервированных для внутреннего использования в +find_each+.

Также доступны две дополнительные опции, +:batch_size+ и +:start+.

*+:batch_size+*

Опция +:batch_size+ позволяет опеределить число записей, подлежащих получению в одном пакете, до передачи отдельной записи в блок. Например, для получения 5000 записей в пакете:

<ruby>
User.find_each(:batch_size => 5000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

*+:start+*

По умолчанию записи извлекаются в порядке увеличения первичного ключа, который должен быть числом. Опция +:start+ позволяет вам настроить первый ID последовательности, когда наименьший ID не тот, что вам нужен. Это полезно, например, если хотите возобновить прерванный процесс пакетирования, предоставив последний обработанный ID как контрольную точку.

Например, чтобы выслать письма только пользователям с первичным ключом, начинающимся от 2000, и получить их в пакетах по 5000:

<ruby>
User.find_each(:start => 2000, :batch_size => 5000) do |user|
  NewsLetter.weekly_deliver(user)
end
</ruby>

Другим примером является наличие нескольких воркеров, работающих с одной и той же очередью обработки. Можно было бы обрабатывать каждым воркером 10000 записей, установив подходящие опции <tt>:start</tt> в каждом воркере.

NOTE: Опция +:include+ позволяет назвать связи, которые должны быть загружены вместе с моделями.

h5. +find_in_batches+

Метод +find_in_batches+ похож на +find_each+, посколько они оба получают пакеты записей. Различие в том, что +find_in_batches+ передает в блок _пакеты_ как массив моделей, вместо отдельной модели. Следующий пример передаст в представленный блок массив из 1000 счетов за раз, а в последний блок содержащий все оставшиеся счета:

<ruby>
# Передает в add_invoices массив из 1000 счетов за раз.
Invoice.find_in_batches(:include => :invoice_lines) do |invoices|
  export.add_invoices(invoices)
end
</ruby>

NOTE: Опция +:include+ позволяет назвать связи, которые должны быть загружены вместе с моделями.

h6. Опции для +find_in_batches+

Метод +find_in_batches+ принимает те же опции +:batch_size+ и +:start+, как и +find_each+, а также большинство опций, допустимых для обычного метода +find+, за исключением +:order+ и +:limit+, зарезервированных для внутреннего использования в +find_in_batches+.
