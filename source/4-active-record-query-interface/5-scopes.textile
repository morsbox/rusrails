h1. Скоупы

Скоупинг позволяет определить часто используемые запросы ARel, к которым можно обращаться как к вызовам метода в связанных объектах или моделях. С помощью этих скоупов можно использовать каждый ранее раскрытый метод, такой как +where+, +joins+ и +includes+. Все методы скоупов возвращают объект +ActiveRecord::Relation+, который позволяет вызывать следующие методы (такие как другие скоупы).

Для определения простого скоупа мы используем метод +scope+ внутри класса, передав запрос ARel, который хотим запустить при вызове скоупа:

<ruby>
class Post < ActiveRecord::Base
  scope :published, where(:published => true)
end
</ruby>

Как и ранее, эти методы также сцепляются:

<ruby>
class Post < ActiveRecord::Base
  scope :published, where(:published => true).joins(:category)
end
</ruby>

Скоупы также сцепляются с другими скоупами:

<ruby>
class Post < ActiveRecord::Base
  scope :published, where(:published => true)
  scope :published_and_commented, published.and(self.arel_table[:comments_count].gt(0))
end
</ruby>

Для вызова этого скоупа +published+, можно вызвать его либо на классе:

<ruby>
Post.published # => [published posts]
</ruby>

Либо на связи, состоящей из объектов +Post+:

<ruby>
category = Category.first
category.posts.published # => [published posts belonging to this category]
</ruby>

h4. Работа со временем

Если вы работаете в скоупах с датой или временем, в связи с особенностями их вычисления необходимо использовать лямбду, таким образом скоуп будет вычисляться каждый раз.

<ruby>
class Post < ActiveRecord::Base
  scope :last_week, lambda { where("created_at < ?", Time.zone.now ) }
end
</ruby>

Без +lambda+, этот +Time.zone.now+ будет вызван один раз.

h4. Передача аргумента

Когда +lambda+ используется для +scope+, можно принимать аргументы:

<ruby>
class Post < ActiveRecord::Base
  scope :1_week_before, lambda { |time| where("created_at < ?", time) }
end
</ruby>

Это можно использовать так:

<ruby>
Post.1_week_before(Time.zone.now)
</ruby>

Однако, это всего лишь дублирование функциональности, которая должна быть предоставлена методом класса.

<ruby>
class Post < ActiveRecord::Base
  def self.1_week_before(time)
    where("created_at < ?", time)
  end
end
</ruby>

Использование метода класса - более предпочтительный способ принятию аргументов скоупом. Эти методы также будут доступны на связанных объектах:

<ruby>
category.posts.1_week_before(time)
</ruby>

h4. Работа со скоупами

Когда требуется реляционный объект, может пригодиться метод +scoped+. Он возвратит объект +ActiveRecord::Relation+, к которому можно впоследствии применить другие скоупы. Это полезно при применении на связях:

<ruby>
client = Client.find_by_first_name("Ryan")
orders = client.orders.scoped
</ruby>

Для полученного объекта +orders+ можно применить дополнительные скоупы. Например, если хотите возвратить заказы только за последние 30 дней.

<ruby>
orders.where("created_at > ?", 30.days.ago)
</ruby>

h4. Применение скоупа по умолчанию

Если хотите, чтобы скоуп был применен ко всем запросам к модели, можно использовать метод +default_scope+ в самой модели.

<ruby>
class Client < ActiveRecord::Base
  default_scope where("removed_at IS NULL")
end
</ruby>

Когды запросы для этой модели будут выполняться, запрос SQL теперь будет выглядеть примерно так:

<sql>
SELECT * FROM clients WHERE removed_at IS NULL
</sql>

h4. Удаление всех скоупов

Если хотите удалить скоупы по какой-то причине, можете использовать метод +unscoped+. Это особенно полезно, если в модели определен +default_scope+, и он не должен быть применен для конкретно этого запроса.

<ruby>
Client.unscoped.all
</ruby>

Этот метод удаляет все скоупы и выполняет обычный запрос к таблице.
