h1. Расширения для Class

h4. Атрибуты класса

h5. +class_attribute+

Метод +class_attribute+ объявляет один или более наследуемых атрибутов класса, которые могут быть переопределены на низшем уровне иерархии:

<ruby>
class A
  class_attribute :x
end

class B < A; end

class C < B; end

A.x = :a
B.x # => :a
C.x # => :a

B.x = :b
A.x # => :a
C.x # => :b

C.x = :c
A.x # => :a
B.x # => :b
</ruby>

Например, +ActionMailer::Base+ определяет:

<ruby>
class_attribute :default_params
self.default_params = {
  :mime_version => "1.0",
  :charset      => "UTF-8",
  :content_type => "text/plain",
  :parts_order  => [ "text/plain", "text/enriched", "text/html" ]
}.freeze
</ruby>

К ним также есть доступ, и они могут быть переопределены на уровне экземпляра:

<ruby>
A.x = 1

a1 = A.new
a2 = A.new
a2.x = 2

a1.x # => 1, приходит из A
a2.x # => 2, переопределено в a2
</ruby>

Создание райтер-метода экземпляра может быть отключено установлением опции +:instance_writer+ в false, как в

<ruby>
module ActiveRecord
  class Base
    class_attribute :table_name_prefix, :instance_writer => false
    self.table_name_prefix = ""
  end
end
</ruby>

В модели такая опция может быть полезной как способ предотвращения массового назначения для установки атрибута.

Создание ридер-метода может быть отключено установлением опции +:instance_reader+ в +false+.

<ruby>
class A
  class_attribute :x, :instance_reader => false
end

A.new.x = 1 # NoMethodError
</ruby>

Для удобства +class_attribute+ определяет также условие экземпляра, являющееся двойным отрицанием того, что возвращает ридер экземпляра. В вышеописанном примере оно может вызываться +x?+.

Когда +instance_reader+ равен +false+, условие экземпляра возвратит +NoMethodError+, как и метод ридера.

NOTE: Определено в +active_support/core_ext/class/attribute.rb+

h5. +cattr_reader+, +cattr_writer+ и +cattr_accessor+

Макросы +cattr_reader+, +cattr_writer+ и +cattr_accessor+ являются аналогами их коллег +attr_*+, но для классов. Они инициализируют переменную класса как +nil+, если она уже существует, и создают соответствующие методы класса для доступа к ней:

<ruby>
class MysqlAdapter < AbstractAdapter
  # Generates class methods to access @@emulate_booleans.
  cattr_accessor :emulate_booleans
  self.emulate_booleans = true
end
</ruby>

Методы экземпляра также создаются для удобства, они всего лишь прокси к атрибуту класса. Таким образом, экземпляры могут менять атрибут класса, но не могут переопределить его, как это происходит в случае с +class_attribute+ (смотрите выше). К примеру, задав

<ruby>
module ActionView
  class Base
    cattr_accessor :field_error_proc
    @@field_error_proc = Proc.new{ ... }
  end
end
</ruby>

мы получим доступ к +field_error_proc+ во вьюхах.

Создание ридер-метода экземпляра предотвращается установкой +:instance_reader+ в +false+ и создание райтер-метода экземпляра предотвращается установкой +:instance_writer+ в +false+. Создание обоих методов предотвращается установкой +:instance_accessor+ в +false+. Во всех случаях, должно быть не любое ложное значение, а именно +false+:

<ruby>
module A
  class B
    # No first_name instance reader is generated.
    cattr_accessor :first_name, :instance_reader => false
    # No last_name= instance writer is generated.
    cattr_accessor :last_name, :instance_writer => false
    # No surname instance reader or surname= writer is generated.
    cattr_accessor :surname, :instance_accessor => false
  end
end
</ruby>

В модели может быть полезным установить +:instance_accessor+ в +false+ как способ предотвращения массового назначения для установки атрибута.

NOTE: Определено в +active_support/core_ext/class/attribute_accessors.rb+.

h4. Наследуемые атрибуты класса

WARNING: Наследуемые атрибуты класса устарели. Рекомендовано использовать вместо них +Class#class_attribute+.

Переменные класса передаются вниз по дереву наследования. Переменные экземпляра класса не передаются, но и не наследуются. Макросы +class_inheritable_reader+, +class_inheritable_writer+ и +class_inheritable_accessor+ предоставляют средства доступа к данным на уровне класса, которые наследуются, но не передаются детям:

<ruby>
module ActionController
  class Base
    # FIXME: REVISE/SIMPLIFY THIS COMMENT.
    # The value of allow_forgery_protection is inherited,
    # but its value in a particular class does not affect
    # the value in the rest of the controllers hierarchy.
    class_inheritable_accessor :allow_forgery_protection
  end
end
</ruby>

Они осуществляют это с помощью переменных экземпляра класса и клонирования их в субклассы, тут не вовлекаются переменные класса. Клонирование выполняется с помощью +dup+ до тех пор, пока значение дублируемое.

Имеется несколько вариантов, специализирующихся на массивах и хэшах:

<ruby>
class_inheritable_array
class_inheritable_hash
</ruby>

Эти райтеры принимают во внимание любой наследуемый массив или хэш и расширяют, а не перезаписывают их.

Как и чистые средства доступа к атрибуту класса, эти макросы создают удобные методы экземпляра для чтения и записи. Создание райтер-метода экземпляра можно отключить установив +:instance_writer+ в +false+ (не любое ложное значение, а именно +false+):

<ruby>
module ActiveRecord
  class Base
    class_inheritable_accessor :default_scoping, :instance_writer => false
  end
end
</ruby>

Так как значения копируются, когда определяется субкласс, если основной класс изменяет атрибут после этого, субкласс не видит новое значение. Вот в чем вопрос.

NOTE: Определено в +active_support/core_ext/class/inheritable_attributes.rb+.

h4. Субклассы и потомки

h5. +subclasses+

Метод +subclasses+ возвращает субклассы получателя:

<ruby>
class C; end
C.subclasses # => []

class B < C; end
C.subclasses # => [B]

class A < B; end
C.subclasses # => [B]

class D < C; end
C.subclasses # => [B, D]
</ruby>

Порядок, в котором эти классы возвращаются, неопределен.

WARNING: Этот метод переопределяет некоторые основные классы Rails, но все это должно стать совместимым в Rails 3.1.

NOTE: Определено в +active_support/core_ext/class/subclasses.rb+.

h5. +descendants+

Метод +descendants+ возвращает все классы, которые являются <tt>&lt;</tt> к его получателю:

<ruby>
class C; end
C.descendants # => []

class B < C; end
C.descendants # => [B]

class A < B; end
C.descendants # => [B, A]

class D < C; end
C.descendants # => [B, A, D]
</ruby>

Порядок, в котором эти классы возвращаются, неопределен.

NOTE: Определено в +active_support/core_ext/class/subclasses.rb+.
