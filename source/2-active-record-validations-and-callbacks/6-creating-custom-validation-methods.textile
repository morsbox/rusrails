h1. Выполнение собственных валидаций

Когда встроенных валидационных хелперов недостаточно для ваших нужд, можете написать свои собственные валидаторы или методы валидации.

h4. Собственные валидаторы

Собственные валидаторы это классы, расширяющие +ActiveModel::Validator+. Эти классы должны реализовать метод +validate+, принимающий запись как аргумент и выполняющий валидацию на ней. Собственный валидатор вызывается с использованием метода +validates_with+.

<ruby>
class MyValidator < ActiveModel::Validator
  def validate(record)
    if record.name.starts_with? ‘X’
      record.errors[:name] << ‘Need a name starting with X please!’
    end
  end
end
 
class Person
  include ActiveModel::Validations
  validates_with MyValidator
end
</ruby>

Простейшим способом добавить собственные валидаторы для валидации отдельных атрибутов является наследуемость от +ActiveModel::EachValidator+. В этом случае класс собственного валидатора должен реализовать метод +validate_each+, принимающий три аргумента: запись, атрибут и значение, соответсвующее экземпляру, соответственно атрибут тот, который будет проверяться и значение в переданном экземпляре:

<ruby>
class EmailValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    unless value =~ /\A([^@\s]<plus>)@((?:[-a-z0-9]<plus>\.)+[a-z]{2,})\z/i
      record.errors[attribute] << (options[:message] || "is not an email")
    end
  end
end

class Person < ActiveRecord::Base
  validates :email, :presence => true, :email => true
end
</ruby>

Как показано в примере, можно объединять стандартные валидации со своими произвольными валидаторами.

h4. Собственные методы

Также возможно создать методы, проверяющие состояние ваших моделей и добавляющие сообщения в коллекцию +errors+, когда они невалидны. Затем эти методы следует зарегистрировать, используя метод класса +validate+, передав символьные имена валидационных методов.

Можно передать более одного символа для каждого метода класса, и соответствующие валидации будут запущены в том порядке, в котором они зарегистрированы.

<ruby>
class Invoice < ActiveRecord::Base
  validate :expiration_date_cannot_be_in_the_past,
    :discount_cannot_be_greater_than_total_value

  def expiration_date_cannot_be_in_the_past
    errors.add(:expiration_date, "can't be in the past") if
      !expiration_date.blank? and expiration_date < Date.today
  end

  def discount_cannot_be_greater_than_total_value
    errors.add(:discount, "can't be greater than total value") if
      discount > total_value
  end
end
</ruby>

По умолчанию такие валидации будут выполнены каждый раз при вызове +valid?+. Также возможно контролировать, когда выполнять собственные валидации, передав опцию +:on+ в метод +validate+, с ключами: +:create+ или +:update+.

<ruby>
class Invoice < ActiveRecord::Base
  validate :active_customer, :on => :create

  def active_customer
    errors.add(:customer_id, "is not active") unless customer.active?
  end
end
</ruby>

Можно даже создать собственные валидационные хелперы и использовать их в нескольких различных моделях. Для примера, в приложении, управляющим исследованиями, может быть полезным указать, что определенное поле соответствует ряду значений:

<ruby>
class ActiveRecord::Base
  def self.validates_as_choice(attr_name, n, options={})
    validates attr_name, :inclusion => { { :in => 1..n }.merge!(options) }
  end
end
</ruby>

Просто переоткройте +ActiveRecord::Base+ и определите подобный этому метод класса. Такой код обычно располагают где-нибудь в +config/initializers+. Теперь Вы можете использовать этот хелпер таким образом:

<ruby>
class Movie < ActiveRecord::Base
  validates_as_choice :rating, 5
end
</ruby>
