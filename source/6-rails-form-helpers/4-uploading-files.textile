h1. Загрузка файлов

Частой задачей является загрузка некоторого файла, или аватарки, или файла CSV, содержащего информацию для обработки. Самая важная вещь, это помнить при загрузке файла, что кодирование формы *ДОЛЖНО* быть установлено как "multipart/form-data". Если используете +form_for+, это будет выполнено автоматически. Если используете +form_tag+, нужно установить это самому, как в следующем примере.

Следующие две формы обе загружают файл.

<erb>
<%= form_tag({:action => :upload}, :multipart => true) do %>
  <%= file_field_tag 'picture' %>
<% end %>

<%= form_for @person do |f| %>
  <%= f.file_field :picture %>
<% end %>
</erb>

NOTE: Начиная с Rails 3.1, формы, создаваемые с использованием +form_for+, автоматически устанавливают свое кодирование как +multipart/form-data+, если внутри блока используется хотя бы раз +file_field+. Прежние версии требовали его указания явно.

Rails предоставляет обычную пару хелперов: скелетный +file_field_tag+ и модельно-ориентированный +file_field+. Единственное отличие от других хелперов в том, что нельзя установить значение по умолчанию для поля ввода файла, так как в этом нет смысла. Как и следует ожидать, в первом случае загруженный файл находится в +params[:picture]+, а во втором случае в +params[:person][:picture]+.

h4. Что имеем загруженным

Объект в хэше +params+ - это экземпляр одного из подклассов класса IO. В зависимости от размера загруженного файла, это может оказаться либо экземпляр класса StringIO, либо экземпляр класса File, отраженный на временный файл в папке временных файлов. В обоих случаях объект будет иметь атрибут +original_filename+, содержащий имя файла на компьютере пользователя, и атрибут +content_type+, содержащий тип MIME загруженного файла. Следующий отрывок сохраняет загруженное содержимое в +#{Rails.root}/public/uploads+ под тем же именем, что и оригинальный файл (предположив, что форма была одна из предыдущего примера).

<ruby>
def upload
  uploaded_io = params[:person][:picture]
  File.open(Rails.root.join('public', 'uploads', uploaded_io.original_filename), 'w') do |file|
    file.write(uploaded_io.read)
  end
end
</ruby>

Как только файл был загружен, появляется множество потенциальных задач, начиная от того, где хранить файлы (на диске, Amazon S3 и т.д.), и как связать их с моделями, до изменения размера файлов изображений и создания эскизов. Такие частности выходят за рамки данного руководства, но имеется несколько библиотек, разработанных для содействия этому. Две лучших из них - это "CarrierWave":https://github.com/jnicklas/carrierwave и "Paperclip":http://www.thoughtbot.com/projects/paperclip.

NOTE: Если пользователь не выбрал файл, соответствующий параметр останется пустой строкой.

h4. Работа с Ajax

В отличие от других форм, форма асинхронной загрузки файла - это не просто передача параметра +:remote => true+ в +form_for+. В Ajax-форме  сериализация происходит посредством JavaScript, исполняющимся внутри браузера, и, поскольку  JavaScript не может прочесть файлы с жесткого диска, файл не может быть загружен. Наиболее частым решением является использование невидимого iframe, который служит целью для отправки формы.
